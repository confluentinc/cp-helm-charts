apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "cp-kafka-connect.fullname" . }}
  labels:
    app: {{ template "cp-kafka-connect.name" . }}
    chart: {{ template "cp-kafka-connect.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "cp-kafka-connect.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "cp-kafka-connect.name" . }}
        release: {{ .Release.Name }}
      {{- if or .Values.podAnnotations .Values.prometheus.jmx.enabled }}
      annotations:
      {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      {{- if .Values.prometheus.jmx.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.prometheus.jmx.port | quote }}
      {{- end }}
      {{- end }}
    spec:
      containers:
        {{- if .Values.prometheus.jmx.enabled }}
        - name: prometheus-jmx-exporter
          image: "{{ .Values.prometheus.jmx.image }}:{{ .Values.prometheus.jmx.imageTag }}"
          command:
          - java
          - -XX:+UnlockExperimentalVMOptions
          - -XX:+UseCGroupMemoryLimitForHeap
          - -XX:MaxRAMFraction=1
          - -XshowSettings:vm
          - -jar
          - jmx_prometheus_httpserver.jar
          - {{ .Values.prometheus.jmx.port | quote }}
          - /etc/jmx-kafka-connect/jmx-kafka-connect-prometheus.yml
          ports:
          - containerPort: {{ .Values.prometheus.jmx.port }}
          resources:
{{ toYaml .Values.prometheus.jmx.resources | indent 12 }}
          volumeMounts:
          - name: jmx-config
            mountPath: /etc/jmx-kafka-connect
        {{- end }}
        - name: {{ template "cp-kafka-connect.name" . }}-server
          image: "{{ .Values.image }}:{{ .Values.imageTag }}"
          imagePullPolicy: "{{ .Values.imagePullPolicy }}"
          ports:
            - name: kafka-connect
              containerPort: {{ .Values.servicePort}}
              protocol: TCP
            {{- if .Values.prometheus.jmx.enabled }}
            - containerPort: {{ .Values.jmx.port }}
              name: jmx
            {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          env:
            - name: CONNECT_REST_ADVERTISED_HOST_NAME
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CONNECT_PLUGIN_PATH
              value: {{ .Values.pluginPath }}
            - name: CONNECT_BOOTSTRAP_SERVERS
              value: {{ template "cp-kafka-connect.kafka.bootstrapServers" . }}
            - name: CONNECT_GROUP_ID
              value: {{ template "cp-kafka-connect.groupId" . }}
            - name: CONNECT_CONFIG_STORAGE_TOPIC
              value: {{ template "cp-kafka-connect.fullname" . }}-config
            - name: CONNECT_OFFSET_STORAGE_TOPIC
              value: {{ template "cp-kafka-connect.fullname" . }}-offset
            - name: CONNECT_STATUS_STORAGE_TOPIC
              value: {{ template "cp-kafka-connect.fullname" . }}-status
            - name: CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL
              value: {{ template "cp-kafka-connect.cp-schema-registry.service-name" .}}
            - name: CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL
              value: {{ template "cp-kafka-connect.cp-schema-registry.service-name" .}}
            - name: CONNECT_KEY_CONVERTER
              value: {{ .Values.connectKeyConverter }}
            - name: CONNECT_VALUE_CONVERTER
              value: {{ .Values.connectValueConverter }}
            - name: CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE
              value: "{{ .Values.connectKeyConverterSchemaEnable }}"
            - name: CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE
              value: "{{ .Values.connectValueConverterSchemaEnable }}"
            - name: CONNECT_INTERNAL_KEY_CONVERTER
              value: {{ .Values.connectInternalKeyConverter }}
            - name: CONNECT_INTERNAL_VALUE_CONVERTER
              value: {{ .Values.connectInternalValueConverter }}
            {{- if or .Values.ssl.enabled .Values.global.kafka.ssl.enabled }}
            - name: CONNECT_SECURITY_PROTOCOL
              value: SSL
            - name: CONNECT_SSL_TRUSTSTORE_LOCATION
              value: /etc/kafka/secrets/{{ template "cp-kafka.ssl.client.truststore" . }}
            - name: CONNECT_SSL_TRUSTSTORE_PASSWORD
              valueFrom: 
                secretKeyRef:
                  name: {{ template "cp-kafka.ssl.secretName" . }}
                  key: client.truststore.password
            - name: KAFKA_DISTRIBUTED_SECURITY_PROTOCOL
              value: SSL
            - name: KAFKA_DISTRIBUTED_SSL_TRUSTSTORE_LOCATION
              value: /etc/kafka/secrets/{{ template "cp-kafka.ssl.client.truststore" . }}
            - name: KAFKA_DISTRIBUTED_SSL_TRUSTSTORE_PASSWORD
              valueFrom: 
                secretKeyRef:
                  name: {{ template "cp-kafka.ssl.secretName" . }}
                  key: client.truststore.password
            {{- if or .Values.ssl.client.auth .Values.global.kafka.ssl.client.auth }}
            - name: CONNECT_SSL_KEYSTORE_LOCATION
              value: /etc/kafka/secrets/{{ template "cp-kafka.ssl.client.keystore" . }}
            - name: CONNECT_SSL_KEYSTORE_PASSWORD
              valueFrom: 
                secretKeyRef:
                  name: {{ template "cp-kafka.ssl.secretName" . }}
                  key: client.keystore.password
            - name: CONNECT_SSL_KEY_PASSWORD
              valueFrom: 
                secretKeyRef:
                  name: {{ template "cp-kafka.ssl.secretName" . }}
                  key: client.key.password
            - name: KAFKA_DISTRIBUTED_SSL_KEYSTORE_LOCATION
              value: /etc/kafka/secrets/{{ template "cp-kafka.ssl.client.keystore" . }}
            - name: KAFKA_DISTRIBUTED_SSL_KEYSTORE_PASSWORD
              valueFrom: 
                secretKeyRef:
                  name: {{ template "cp-kafka.ssl.secretName" . }}
                  key: client.keystore.password
            - name: KAFKA_DISTRIBUTED_SSL_KEY_PASSWORD
              valueFrom: 
                secretKeyRef:
                  name: {{ template "cp-kafka.ssl.secretName" . }}
                  key: client.key.password
            {{- end }}
            {{- end }}
            {{- if .Values.jmx.port }}
            - name: KAFKA_JMX_PORT
              value: "{{ .Values.jmx.port }}"
            {{- end }}
          {{- if or .Values.ssl.enabled .Values.global.kafka.ssl.enabled }}
          volumeMounts:
          - name: ssl
            mountPath: "/etc/kafka/secrets"
          {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 8 }}
      {{- end }}
      volumes:
      {{- if or .Values.ssl.enabled .Values.global.kafka.ssl.enabled }}
      - name: ssl
        secret:
          secretName: {{ template "cp-kafka.ssl.secretName" . }}
      {{- end }}
      {{- if .Values.prometheus.jmx.enabled }}
      - name: jmx-config
        configMap:
          name: {{ template "cp-kafka-connect.fullname" . }}-jmx-configmap
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
