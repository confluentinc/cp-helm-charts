This chart installs a {{ default 1 .Values.servers }} nodes Confluent KSQL Cluster.

To try it out

1. Deploy a data-generating pod with configuration:

    apiVersion: v1
    kind: Pod
    metadata:
      name: data-generator
      namespace: {{ .Release.Namespace }}
    spec:
      containers:
      - name: ksql-datagen-pageviews
        image: confluentinc/ksql-examples:{{ .Values.imageTag }}
        command:
          - sh
          - -c
          - "exec java -jar /usr/share/java/ksql-examples/ksql-examples-5.0.0-SNAPSHOT-standalone.jar quickstart=pageviews format=delimited topic=pageviews  bootstrap-server={{ .Release.Namespace }}-cp-kafka:9092"
      - name: ksql-datagen-users
        image: confluentinc/ksql-examples:{{ .Values.imageTag }}
        command:
          - sh
          - -c
          - "exec java -jar /usr/share/java/ksql-examples/ksql-examples-5.0.0-SNAPSHOT-standalone.jar quickstart=users format=json topic=users iterations=1000 bootstrap-server={{ .Release.Namespace }}-cp-kafka:9092"

  Easiest way is to edit examples/data-generator.yaml file and then:
  kubectl apply -f examples/data-generator.yaml

2. Log into the KSQL Pod

  kubectl exec -it cp-ksql -- /bin/bash

  and run "ksql" command to start the CLI

3. Explore with ksql commands:

  # Create a stream (pageviews) from the Kafka topic pageviews, specifying the value_format of DELIMITED.
  # Enter the SHOW STREAMS; command to view your streams

    ksql> CREATE STREAM pageviews (viewtime BIGINT, userid VARCHAR, pageid VARCHAR) WITH (KAFKA_TOPIC='pageviews', VALUE_FORMAT='DELIMITED');
    ksql> SHOW STREAMS;

  # Create a table (users) with several columns from the Kafka topic users, with the value_format of JSON.
  # Enter the SHOW TABLES; query to view your tables.

    ksql> CREATE TABLE users (registertime BIGINT, gender VARCHAR, regionid VARCHAR, userid VARCHAR, \interests array<VARCHAR>, contact_info map<VARCHAR, VARCHAR>) WITH (KAFKA_TOPIC='users', VALUE_FORMAT='JSON', KEY = 'userid');
    ksql> SHOW TABLES;

  # Create a query that returns data from a stream with the results limited to three rows.

    ksql> SELECT pageid FROM pageviews LIMIT 3;


