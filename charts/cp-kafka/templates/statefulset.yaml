apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "cp-kafka.fullname" . }}
  labels:
    app: {{ template "cp-kafka.name" . }}
    chart: {{ template "cp-kafka.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  serviceName: {{ template "cp-kafka.fullname" . }}-headless
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  replicas: {{ default 3 .Values.brokers }}
  updateStrategy:
    type: {{ .Values.updateStrategy }}
  template:
    metadata:
      labels:
        app: {{ template "cp-kafka.name" . }}
        release: {{ .Release.Name }}
      {{- if or .Values.podAnnotations .Values.prometheus.jmx.enabled }}
      annotations:
      {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      {{- if .Values.prometheus.jmx.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.prometheus.jmx.port | quote }}
      {{- end }}
      {{- end }}
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - {{ template "cp-kafka.name" . }}
                  - key: "release"
                    operator: In
                    values:
                    - {{ .Release.Name }}
              topologyKey: "kubernetes.io/hostname"
      containers:
      {{- if .Values.prometheus.jmx.enabled }}
      - name: prometheus-jmx-exporter
        image: "{{ .Values.prometheus.jmx.image }}:{{ .Values.prometheus.jmx.imageTag }}"
        command:
        - java
        - -XX:+UnlockExperimentalVMOptions
        - -XX:+UseCGroupMemoryLimitForHeap
        - -XX:MaxRAMFraction=1
        - -XshowSettings:vm
        - -jar
        - jmx_prometheus_httpserver.jar
        - {{ .Values.prometheus.jmx.port | quote }}
        - /etc/jmx-kafka/jmx-kafka-prometheus.yml
        ports:
        - containerPort: {{ .Values.prometheus.jmx.port }}
        resources:
{{ toYaml .Values.prometheus.jmx.resources | indent 10 }}
        volumeMounts:
        - name: jmx-config
          mountPath: /etc/jmx-kafka
      {{- end }}
      - name: {{ template "cp-kafka.name" . }}-broker
        image: "{{ .Values.image }}:{{ .Values.imageTag }}"
        imagePullPolicy: "{{ .Values.imagePullPolicy }}"
        ports:
        {{- if or .Values.ssl.enabled .Values.global.kafka.ssl.enabled }}
        - containerPort: 9093
          name: kafka
        - containerPort: 9092
          name: kafka-internal
        {{- else }}
        - containerPort: 9092
          name: kafka
        {{- end }}
        {{- if .Values.prometheus.jmx.enabled }}
        - containerPort: {{ .Values.jmx.port }}
          name: jmx
        {{- end }}
        {{- if .Values.nodeport.enabled }}
          {{- $brokers := .Values.brokers | int }}
          {{- $root := . }}
          {{- range $i, $e := until $brokers }}
        - containerPort: {{ add $root.Values.nodeport.firstListenerPort $i }}
          name: nodeport-{{ $i }}
          {{- end }}
        {{- end }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KAFKA_HEAP_OPTS
          value: {{ .Values.heapOptions }}
        {{- if or .Values.ssl.enabled .Values.global.kafka.ssl.enabled }}

        # Kafka configurations
        - name: KAFKA_SSL_KEYSTORE_FILENAME
          value: {{ template "cp-kafka.ssl.broker.keystore" . }}
        - name: KAFKA_SSL_KEYSTORE_CREDENTIALS
          value: broker.keystore.password
        - name: KAFKA_SSL_TRUSTSTORE_FILENAME
          value: {{ template "cp-kafka.ssl.broker.truststore" . }}
        - name: KAFKA_SSL_TRUSTSTORE_CREDENTIALS
          value: broker.truststore.password
        - name: KAFKA_SSL_KEY_CREDENTIALS
          value: broker.key.password
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: SSL
        - name: KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM
          value: ' '
        - name: KAFKA_SSL_CLIENT_AUTH
          value: {{ template "cp-kafka.ssl.client.auth.type" . }}
        - name: KAFKA_AUTHORIZER_CLASS_NAME
          value: kafka.security.auth.SimpleAclAuthorizer
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: SSL:SSL,PLAINTEXT:PLAINTEXT,EXTERNAL:SSL
        - name: KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND
          value: "false"

        # Confluent metrics
        - name: CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS
          value: {{ printf "SSL://%s:9093" (include "cp-kafka.cp-kafka-headless.fullname" .) | quote }}
        - name: CONFLUENT_METRICS_REPORTER_SECURITY_PROTOCOL
          value: SSL
        - name: CONFLUENT_METRICS_REPORTER_SSL_TRUSTSTORE_LOCATION
          value: /etc/kafka/secrets/{{ template "cp-kafka.ssl.broker.truststore" . }}
        - name: CONFLUENT_METRICS_REPORTER_SSL_TRUSTSTORE_PASSWORD
          valueFrom: 
            secretKeyRef:
              name: {{ template "cp-kafka.ssl.secretName" . }}
              key: broker.truststore.password
        - name: CONFLUENT_METRICS_REPORTER_SSL_KEYSTORE_LOCATION
          value: /etc/kafka/secrets/{{ template "cp-kafka.ssl.broker.keystore" . }}
        - name: CONFLUENT_METRICS_REPORTER_SSL_KEYSTORE_PASSWORD
          valueFrom: 
            secretKeyRef:
              name: {{ template "cp-kafka.ssl.secretName" . }}
              key: broker.keystore.password
        - name: CONFLUENT_METRICS_REPORTER_SSL_KEY_PASSWORD
          valueFrom: 
            secretKeyRef:
              name: {{ template "cp-kafka.ssl.secretName" . }}
              key: broker.key.password

        {{- if or .Values.ssl.client.auth .Values.global.kafka.ssl.client.auth }}
        - name: KAFKA_SUPER_USERS
          value: User:CN=*.{{ template "cp-kafka.cp-kafka-headless.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local;{{ default .Values.ssl.client.brokerPrincipals .Values.global.kafka.ssl.client.brokerPrincipals }}
        {{- end }}
        {{- else }}
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
        - name: CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS
          value: {{ printf "SSL://%s:9092" (include "cp-kafka.cp-kafka-headless.fullname" .) | quote }}
        {{- end }}
        {{- if not (hasKey .Values.configurationOverrides "zookeeper.connect") }}
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: {{ include "cp-kafka.cp-zookeeper.service-name" . | quote }}
        {{- end }}
        - name: KAFKA_LOG_DIRS
          value: {{ include "cp-kafka.log.dirs" . | quote }}
        - name: KAFKA_METRIC_REPORTERS
          value: "io.confluent.metrics.reporter.ConfluentMetricsReporter"
        {{- range $key, $value := .Values.configurationOverrides }}
        - name: {{ printf "KAFKA_%s" $key | replace "." "_" | upper | quote }}
          value: {{ $value | quote }}
        {{- end }}
        {{- range $key, $value := .Values.customEnv }}
        - name: {{ $key | quote }}
          value: {{ $value | quote }}
        {{- end }}
        {{- if .Values.jmx.port }}
        - name: KAFKA_JMX_PORT
          value: "{{ .Values.jmx.port }}"
        {{- end }}
        # This is required because the Downward API does not yet support identification of
        # pod numbering in statefulsets. Thus, we are required to specify a command which
        # allows us to extract the pod ID for usage as the Kafka Broker ID.
        # See: https://github.com/kubernetes/kubernetes/issues/31218
        command:
        - sh
        - -exc
        - |
          export KAFKA_BROKER_ID=${HOSTNAME##*-} && \
          {{- if or .Values.ssl.enabled .Values.global.kafka.ssl.enabled }}
          export KAFKA_ADVERTISED_LISTENERS=SSL://${POD_NAME}.{{ template "cp-kafka.fullname" . }}-headless.${POD_NAMESPACE}.svc.cluster.local:9093,EXTERNAL://${HOST_IP}:$((31090 + ${KAFKA_BROKER_ID})) && \
          {{- else }}
          export KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${POD_NAME}.{{ template "cp-kafka.fullname" . }}-headless.${POD_NAMESPACE}:9092{{ include "cp-kafka.configuration.advertised.listeners" . }} && \
          {{- end }}
          exec /etc/confluent/docker/run
        volumeMounts:
        {{- $disksPerBroker := .Values.persistence.disksPerBroker | int }}
        {{- range $k, $e := until $disksPerBroker }}
        - name: datadir-{{$k}}
          mountPath: /opt/kafka/data-{{$k}}
        {{- end }}
        {{- if or .Values.ssl.enabled .Values.global.kafka.ssl.enabled }}
        - name: ssl
          mountPath: "/etc/kafka/secrets"
        {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 8 }}
      {{- end }}
      volumes:
      {{- if not .Values.persistence.enabled }}
      - name: datadir-0
        emptyDir: {}
      {{- end }}
      {{- if or .Values.ssl.enabled .Values.global.kafka.ssl.enabled }}
      - name: ssl
        secret:
          secretName: {{ template "cp-kafka.ssl.secretName" . }}
      {{- end }}
      {{- if .Values.prometheus.jmx.enabled }}
      - name: jmx-config
        configMap:
          name: {{ template "cp-kafka.fullname" . }}-jmx-configmap
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
  {{- $disksPerBroker := .Values.persistence.disksPerBroker | int }}
  {{- $root := . }}
  {{- range $k, $e := until $disksPerBroker }}
  - metadata:
      name: datadir-{{$k}}
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: "{{ $root.Values.persistence.size }}"
      {{- if $root.Values.persistence.storageClass }}
      {{- if (eq "-" $root.Values.persistence.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: "{{ $root.Values.persistence.storageClass }}"
      {{- end }}
      {{- end }}
  {{- end }}
  {{- end }}